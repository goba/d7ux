<?php
// $Id: toolbar.module,v 1.10 2009/09/05 15:05:05 dries Exp $

/**
 * @file
 * Administration toolbar for quick access to top level administration items.
 */

/**
 * Implement hook_menu().
 */
function toolbar_menu() {
  $items = array();
  $items['admin/settings/shortcuts/add-link'] = array(
    'title' => 'Add link',
    'page callback' => 'toolbar_shortcut_add_link',
    'access arguments' => array('create own shortcuts'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/shortcuts/edit'] = array(
    'page callback' => 'toolbar_shortcut_edit_links',
    'access arguments' => array('create own shortcuts'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function toolbar_permission() {
  return array(
    'access toolbar' => array(
      'title' => t('Access administration toolbar'),
      'description' => t('Access the persistent administration toolbar displayed on all pages.'),
    ),
    'create own shortcuts' => array(
      'title' => t('Create own shortcuts'),
      'description' => t('Users with this permission are able to automatically add items to their personal shortcuts menu.'),
    ),
  );
}

/**
 * Implement hook_theme().
 */
function toolbar_theme($existing, $type, $theme, $path) {
  $items['toolbar'] = array(
    'arguments' => array('toolbar' => array()),
    'template' => 'toolbar',
    'path' => drupal_get_path('module', 'toolbar'),
  );
  return $items;
}

/**
 * Implement hook_page_build().
 * 
 * Add admin toolbar to the page_top region automatically.
 */
function toolbar_page_build(&$page) {
  if (user_access('access toolbar') && toolbar_enabled()) {
    $page['page_top']['toolbar'] = toolbar_build();
  }
  if (user_access('create own shortcuts')) {
    // $_GET['q'] is the unaliased version.
    $get = $_GET;
    unset($get['q']);
    $link = $_GET['q'];
    if (!empty($get)) {
      $link .= '?' . http_build_query($get);
    }
    $query = array(
      'link' => $link,
      'name' => drupal_get_title(),
      'token' => drupal_get_token('toolbar-add-to-shortcuts'),
    );
    $page['add_to_shortcuts'] = array(
      '#prefix' => '<div class="toolbar-add-to-shortcuts">',
      '#markup' => l('<span class="icon"></span><span class="text">' . t('Add to shortcuts') . '</span>', 'admin/settings/shortcuts/add-link', array('query' => http_build_query($query), 'html' => TRUE)),
      '#suffix' => '</div>',
    );
  }
}

/**
 * Add a link to the shortcuts menu.
 */
function toolbar_shortcut_add_link() {
  if (isset($_REQUEST['token']) && drupal_valid_token($_REQUEST['token'], 'toolbar-add-to-shortcuts')) {
    $link = array(
      'link_title' => $_GET['name'],
      'link_path' => $_GET['link'],
    );
    if (menu_save_link_to_personalized_menu($link, toolbar_shortcuts_menu_name())) {
      drupal_set_message(t('Added a shortcut for %title.', array('%title' => $link['link_title'])));
      drupal_goto('admin/structure/menu-customize/' . $link['menu_name']);
    }
  }
}

/**
 * Edit the shortcuts menu for the current user, creating a new one if needed.
 */
function toolbar_shortcut_edit_links() {
  global $user;
  $menu = menu_load(toolbar_shortcuts_menu_name());
  if (!menu_is_personalized_for_user($menu, $user)) {
    $menu = menu_clone_menu($menu, $user);
  }
  drupal_goto('admin/structure/menu-customize/' . $menu['menu_name']);
}

/**
 * Enable or disable the toolbar, or find out the current status of the
 * toolbar (enabled or disabled).
 *
 * @param $enabled
 *   If given, will change the display mode of the toolbar to the given
 *   boolean.
 * @return
 *   The current status of the toolbar, TRUE for enabled, FALSE for disabled.
 */
function toolbar_enabled($enabled = NULL) {
  $setting = &drupal_static(__FUNCTION__, TRUE);
  if (isset($enabled)) {
    $setting = $enabled;
  }
  return $setting;
}

/**
 * Implement hook_preprocess_page().
 *
 * Add some page classes, so global page theming can adjust to the toolbar.
 */
function toolbar_preprocess_page(&$vars) {
  if (user_access('access toolbar')) {
    $vars['classes_array'][] = 'toolbar toolbar-shortcuts';
  }
  $vars['add_to_shortcuts'] = !empty($vars['page']['add_to_shortcuts']) ? drupal_render($vars['page']['add_to_shortcuts']) : '';
}

/**
 * Build the admin menu as a structured array ready for drupal_render().
 */
function toolbar_build() {
  global $user;

  $module_path = drupal_get_path('module', 'toolbar');
  $build = array(
    '#theme' => 'toolbar',
    '#attached'=> array(
      'js' => array(
        $module_path . '/toolbar.js',
        array('data' => 'misc/jquery.cookie.js', 'weight' => JS_LIBRARY + 2),
      ),
      'css' => array(
        $module_path . '/toolbar.css',
      ),
    ),
  );

  // Retrieve the admin menu from the database.
  $links = toolbar_menu_navigation_links(toolbar_get_menu_tree());
  $build['toolbar_menu'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('id' => 'toolbar-menu'),
  );

  // Add logout & user account links
  $build['toolbar_user'] = array(
    '#theme' => 'links',
    '#links' => array(
      'account' => array(
        'title' => t('Hello <strong>@username</strong>', array('@username' => $user->name)),
        'href' => 'user',
        'html' => TRUE,
      ),
      'logout' => array(
        'title' => t('Logout'),
        'href' => 'user/logout',
      ),
    ),
    '#attributes' => array('id' => 'toolbar-user'),
  );

  // Add convenience shortcut links.
  $shortcuts = menu_tree_all_data(toolbar_shortcuts_menu_name());
  $shortcuts = toolbar_menu_navigation_links($shortcuts);
  $build['toolbar_shortcuts'] = array(
    'shortcuts' => array(
      '#theme' => 'links',
      '#links' => $shortcuts,
      '#attributes' => array('id' => 'toolbar-shortcuts'),
    ),
  );
  if (user_access('create own shortcuts')) {
    $build['toolbar_shortcuts']['configure'] = array(
      '#markup' => l(t('edit shortcuts'), 'admin/settings/shortcuts/edit', array('attributes' => array('id' => 'toolbar-customize'))),
    );
  }

  return $build;
}

/**
 * Returns the name of the menu that has the current user's toolbar shortcuts.
 */
function toolbar_shortcuts_menu_name() {
  return menu_get_menu_name_for_user('admin-shortcuts');
}

/**
 * Get only the top level items below the 'admin' path.
 */
function toolbar_get_menu_tree() {
  $tree = array();
  $admin_link = db_query("SELECT * FROM {menu_links} WHERE menu_name = 'management' AND module = 'system' AND link_path = 'admin'")->fetchAssoc();
  if ($admin_link) {
    $tree = menu_tree_all_data('management', $admin_link);
    // The tree will be a sub-tree with the admin link as a single root item.
    $admin_link = array_pop($tree);
    $tree = $admin_link['below'] ? $admin_link['below'] : array();
    foreach ($tree as $key => $item) {
      // Get rid of subitems to have a leaner data structure.
      unset($tree[$key]['below']);
    }
  }
  return $tree;
}

/**
 * Generate a links array from a menu tree array.
 *
 * Based on menu_navigation_links(). Adds in path based IDs, icon placeholders
 * and overlay classes for the links.
 */
function toolbar_menu_navigation_links($tree) {
  $links = array();
  foreach ($tree as $item) {
    if (!$item['link']['hidden'] && $item['link']['access']) {
      $class = '';
      // Make sure we have a path specific ID in place, so we can attach icons
      // and behaviors to the items.
      $id = str_replace(array('/', '<', '>'), array('-', '', ''), $item['link']['href']);

      $link = $item['link']['localized_options'];
      $link['href'] = $item['link']['href'];
      // Add icon placeholder.
      $link['title'] = '<span class="icon"></span>' . $item['link']['title'];
      // Add admin link ID and to-overlay class for the overlay.
      $link['attributes'] = array('id' => 'toolbar-link-' . $id, 'class' => array('to-overlay'));
      $link['html'] = TRUE;

      $class = ' path-' . $id;
      if (toolbar_in_active_trail($item['link']['href'])) {
        $class .= ' active-trail';
      }
      $links['menu-' . $item['link']['mlid'] . $class] = $link;
    }
  }
  return $links;
}

/**
 * Checks whether an item is in the active trail.
 *
 * Useful when using a menu generated by menu_tree_all_data() which does 
 * not set the 'in_active_trail' flag on items.
 *
 * @todo
 *   Look at migrating to a menu system level function.
 */
function toolbar_in_active_trail($path) {
  $active_paths = &drupal_static(__FUNCTION__);

  // Gather active paths.
  if (!isset($active_paths)) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}
