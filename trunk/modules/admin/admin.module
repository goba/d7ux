<?php
// $Id$

/**
 * @file
 * Administration toolbar for quick access to top level administration items.
 */

/**
 * Implementation of hook_perm().
 */
function admin_perm() {
  return array(
    'admin toolbar' => array(
      'title' => t('Use administration toolbar'),
      'description' => t('Access the persistent administration toolbar on each page.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function admin_theme($existing, $type, $theme, $path) {
  $items = array();
  $items['admin_toolbar'] = array(
    'arguments' => array('admin_toolbar' => array()),
    'template' => 'admin-toolbar',
    'path' => drupal_get_path('module', 'admin'),
  );
  return $items;
}

/**
 * Implementation of hook_page_alter().
 * 
 * Add admin toolbar to the page_top region automaticaly.
 */
function admin_page_alter(&$page) {
  if (user_access('admin toolbar')) {
    $page['page_top']['admin_toolbar'] = admin_toolbar();
  }
}

/**
 * Implementation of hook_preprocess_page().
 *
 * Add some page classes, so global page theming can adjust to the toolbar.
 */
function admin_preprocess_page(&$vars) {
  if (user_access('admin toolbar')) {
    $vars['classes_array'][] = 'admin-toolbar';
    if (empty($vars['page']['admin']['admin_toolbar']['collapsed'])) {
      $vars['classes_array'][] = 'admin-toolbar-links';
    }
  }
}

/**
 * Build the admin menu as a structured array ready for drupal_render().
 */
function admin_toolbar() {
  $module_path = drupal_get_path('module', 'admin');
  $output = array(
    '#theme' => 'admin_toolbar',
    '#attached_js' => array(
      $module_path . '/admin_toolbar.js',
      array('data' => 'misc/jquery.cookies.js', 'weight' => JS_LIBRARY + 2),
    ),
    '#attached_css' => array(
      $module_path . '/admin_toolbar.css',
    ),
  );

  // Retrieve the admin menu from the database.
  $tree = admin_get_menu_tree();
  $links = admin_menu_navigation_links($tree);
  $output['admin_menu'] = $links;

  // Add logout & user account links
  global $user;
  $user_menu = array(
    'account' => array(
      'title' => t('Hello <strong>!username</strong>', array('!username' => check_plain($user->name))),
      'href' => 'user',
      'html' => TRUE,
      'attributes' => array('class' => 'to-overlay'),
    ),
    'logout' => array(
      'title' => t('Logout'),
      'href' => 'user/logout',
    ),
  );
  $output['user_menu'] = $user_menu;

  // Add convenience shortcut links.
  $admin_shortcuts = menu_tree_all_data('admin');
  $admin_shortcuts = admin_menu_navigation_links($admin_shortcuts);
  $output['admin_shortcuts'] = $admin_shortcuts;

  // Set the default toolbar state to expanded.
  $output['collapsed'] = FALSE;
  return $output;
}

/**
 * Get only the top level items below the 'admin' path.
 */
function admin_get_menu_tree() {
  $tree = menu_tree_all_data('management');
  foreach ($tree as $k => $item) {
    if ($item['link']['link_path'] == 'admin' && !empty($item['below'])) {
      // Only take items right below the 'admin' path. All other
      // management items are discarded.
      $tree = $item['below'];
      break;
    }
  }
  foreach ($tree as $k => $item) {
    // Get rid of subitems to have a leaner data structure.
    unset($tree[$k]['below']);
  }
  return $tree;
}

/**
 * Generate a links array from a menu tree array.
 *
 * Based on menu_navigation_links() with some admin toolbar specific changes.
 */
function admin_menu_navigation_links($tree) {
  $links = array();
  foreach ($tree as $item) {
    if (!$item['link']['hidden']) {
      $class = '';
      // Make sure we have a path specific ID in place, so
      // we can attach icons and behaviors to the items.
      $id = str_replace('/', '-', $item['link']['href']);

      $l = $item['link']['localized_options'];
      $l['href'] = $item['link']['href'];
      // Add icon placeholder.
      $l['title'] = '<span class="icon"></span>' . $item['link']['title'];
      // Add admin link ID and to-overlay class for the overlay.
      $l['attributes'] = array('id' => 'admin-link-' . $id, 'class' => 'to-overlay');
      $l['html'] = TRUE;

      $class = ' path-' . $id;
      if (admin_in_active_trail($item['link']['href'])) {
        $class .= ' active-trail';
      }
      $links['menu-'. $item['link']['mlid'] . $class] = $l;
    }
  }
  return $links;
}

/**
 * Checks whether an item is in the active trail.
 *
 * Useful when using a menu generated by menu_tree_all_data() which does 
 * not set the 'in_active_trail' flag on items.
 */
function admin_in_active_trail($path) {
  $active_paths = &drupal_static(__FUNCTION__);

  // Gather active paths
  if (!isset($active_paths)) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**
 * Preprocessor for theme('admin_toolbar').
 */
function template_preprocess_admin_toolbar(&$vars) {
  $vars['user_menu'] = theme('links', $vars['admin_toolbar']['user_menu'], array('id' => 'admin-toolbar-user'));
  $vars['admin_menu'] = theme('links', $vars['admin_toolbar']['admin_menu'], array('id' => 'admin-toolbar-menu'));
  $vars['admin_shortcuts'] = theme('links', $vars['admin_toolbar']['admin_shortcuts'], array('id' => 'admin-toolbar-shortcuts'));
  $vars['collapsed'] = $vars['admin_toolbar']['collapsed'];
}
