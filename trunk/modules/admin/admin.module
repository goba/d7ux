<?php
// $Id$

/**
 * Implementation of hook_init().
 */
function admin_init() {
  if (admin_is_enabled('admin toolbar') || admin_is_enabled('admin inline') || arg(0) == 'admin') {
    $path = drupal_get_path('module', 'admin');
    drupal_add_js($path .'/admin_toolbar.js');
    drupal_add_css($path .'/admin_toolbar.css');
  }
}

/**
 * Implementation of hook_perm().
 */
function admin_perm() {
  return array(
    'admin toolbar' => array(
      'title' => t('Use admin toolbar'),
      'description' => t('Access the persistent administration toolbar at the top of each page.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function admin_theme($cache, $type, $theme, $path) {
  $items = array();
  $items['admin_toolbar'] = array(
    'arguments' => array('admin_toolbar' => array()),
    'template' => 'admin-toolbar',
    'path' => drupal_get_path('module', 'admin'),
    'file' => 'admin.theme.inc',
  );
  return $items;
}

/**
 * Wrapper to check whether various admin features are accessible to the
 * current user and compatible with the current theme.
 */
function admin_is_enabled($op = 'admin toolbar') {
  if (user_access($op)) {
    global $theme_info;
    // If the theme does not specify some flag for this feature, assume it is compatible.
    if (!isset($theme_info->info['admin'][$op]) || (isset($theme_info->info['admin'][$op]) && !empty($theme_info->info['admin'][$op]))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_page_alter().
 */
function admin_page_alter(&$page) {
  if (admin_is_enabled('admin toolbar')) {
    $page['page_top']['admin_toolbar'] = admin_toolbar();
  }
}

/**
 * Implementation of hook_preprocess_page().
 */
function admin_preprocess_page(&$vars) {
  if (admin_is_enabled('admin toolbar')) {
    $vars['classes_array'][] = 'admin-toolbar';
    if (empty($vars['page']['admin']['admin_toolbar']['collapsed'])) {
      $vars['classes_array'][] = 'admin-toolbar-links';
    }
  }
}

/**
 * Helper for returning a selectively flattened version of the admin menu.
 */
function admin_get_menu_tree($method = 'all', $reset = FALSE) {
  $tree = ($method == 'all') ? menu_tree_all_data('management') : menu_tree_page_data('management');
  foreach ($tree as $k => $item) {
    if ($item['link']['link_path'] == 'admin' && !empty($item['below'])) {
      unset($tree[$k]);
      $tree = array_merge($tree, $item['below']);
    }
  }
  return $tree;
}

/**
 * Build the admin menu as a structured array ready for drupal_render().
 */
function admin_toolbar() {
  $output = array('#theme' => 'admin_toolbar');

  // Retrieve the admin menu from the database.
  $tree = admin_get_menu_tree();
  $links = admin_menu_navigation_links($tree);
  $output['admin_menu'] = $links;

  // Add logout & user account links
  global $user;
  $user_menu = array(
    'account' => array(
      'title' => t('Hello <strong>!username</strong>', array('!username' => check_plain($user->name))),
      'href' => 'user',
      'html' => TRUE,
      'attributes' => array('class' => 'popups'),
    ),
    'logout' => array(
      'title' => t('Logout'),
      'href' => 'user/logout',
    ),
  );
  $output['user_menu'] = $user_menu;

  // Add convenience admin links
  $admin_links = menu_tree_all_data('admin');
  $admin_links = admin_menu_navigation_links($admin_links);
  $output['admin_links'] = $admin_links;

  // Set the default toolbar state to expanded.
  $output['collapsed'] = FALSE;
  return $output;
}

/**
 * Generate a links array from a menu tree array.
 */
function admin_menu_navigation_links($tree) {
  $links = array();
  foreach ($tree as $item) {
    if (!$item['link']['hidden']) {
      $class = '';
      $id = str_replace('/', '-', $item['link']['href']);

      $l = $item['link']['localized_options'];
      $l['href'] = $item['link']['href'];
      $l['title'] = "<span class='icon'></span>". $item['link']['title'];
      $l['attributes'] = array('id' => 'admin-link-'. $id, 'class' => 'popups');
      $l['html'] = TRUE;

      $class = ' path-'. $id;
      if (admin_in_active_trail($item['link']['href'])) {
        $class .= ' active-trail';
      }
      // Keyed with the unique mlid to generate classes in theme_links().
      $links['menu-'. $item['link']['mlid'] . $class] = $l;
    }
  }
  return $links;
}

/**
 * Checks whether an item is in the active trail. Useful when using
 * a menu generated by menu_tree_all_data() which does not set the
 * 'in_active_trail' flag on items.
 */
function admin_in_active_trail($path) {
  $active_paths = &drupal_static(__FUNCTION__);

  // Gather active paths
  if (!isset($active_paths)) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}
