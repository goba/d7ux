<?php
// $Id$

/**
 * @file
 * Displays the Drupal administration interface in an overlay.
 */

/**
 * Implementation of hook_init().
 */
function overlay_init() {
  // Only act if the admin toolbar "is enabled" (user has access).
  if (user_access('admin toolbar')) {
    if (!empty($_GET['render']) && ($_GET['render'] == 'overlay')) {
      // d7uxoverlay marks modal frames.
      global $custom_theme;
      // @todo: rename overlay theme to avoid naming conflict.
      $custom_theme = 'overlay';
      overlay_child_js();
    }
    else {
      // Otherwise add overlay parent code and our behavior.
      overlay_parent_js();
    }
  }
}

/**
 * Extra form submission handler.
 *
 * For cases when we need to keep the form in the modal frame.
 /
function overlay_form_submit($form, &$form_state) {
  if (is_array($form_state['redirect'])) {
    if (!empty($form_state['redirect'][1])) {
      if (is_array($form_state['redirect'][1])) {
        // Query is an array, add our marker as a key.
        $form_state['redirect'][1]['d7uxoverlay'] = 1;
      }
      else {
        // Query is not an array, add our marker as string.
        $form_state['redirect'][1] .= '&d7uxoverlay=1';
      }
    }
    else {
      // Empty or is not set, but parent is array. Add array.
      $form_state['redirect'][1] = array('d7uxoverlay' => 1);
    }
  }
  elseif (!isset($form_state['redirect']) || ($form_state['redirect'] !== FALSE && $form_state['redirect'] !== NULL)) {
    // Not an array. Save the path value and add our own marker.
    $form_state['redirect'] = array(!empty($form_state['redirect']) ? $form_state['redirect'] : $_GET['q'], array('d7uxoverlay' => 1));
  }
}
*/

/**
 * Implementation of hook_theme_registry_alter().
 *
 * Prepend our module path to the theme registry entry for theme('page').
 *
 * When we need to render an overlay, overlay_child_js() defines the
 * variable $GLOBALS['overlay_page_template']. Then, when theme('page') is
 * executed, Drupal invokes all template preprocess functions related to the
 * page template. When overlay_preprocess_page() is invoked, it looks for
 * this global variable, and if it exists, then the name of the template file
 * 'page' is replaced by 'overlay-page'.
 *
 * This technique allows us to use a particular version of the template used
 * to generate the output of theme('page') with a different layout (ie. no
 * header, no left/right blocks, etc.), while still keeping all the features
 * related to theme('page') implemented by core, themes and contrib modules
 * such us jquery_update at no additional cost. Also, themers can provide their
 * own custom versions of page.tpl.php and overlay-page.tpl.php.
 *
 * There is no additional performance impact during normal site operation,
 * when using theme('page') without further alterations. No additional lookup
 * will be made for page.tpl.php. This is it:
 *
 * 1) Active theme directory (it may or may not exist, often will).
 * 2) Drupal's modules/system/page.tpl.php (default).
 * 3) overlay module directory (this lookup will be never reached).
 *
 * On the other hand, when the file name for page template is altered, the
 * lookups for file overlay-page.tpl.php will proceed like this:
 *
 * 1) Active theme directory (it may or may not exist, often won't).
 * 2) modules/system/overlay-page.tpl.php (this lookup will always fail).
 * 3) overlay module directory (default).
 *
 * @see overlay_child_js()
 * @see overlay_preprocess_page()
 * @see _theme_build_registry()
 * @see theme_get_registry()
 * @see theme()
 *
 * @ingroup themeable
 */
function overlay_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page']) && isset($theme_registry['page']['theme paths'])) {
    $module_path = drupal_get_path('module', 'overlay');
    array_unshift($theme_registry['page']['theme paths'], $module_path);
  }
}

/**
 * Preprocess template variables for page.tpl.php.
 *
 * Now that we have altered the registry entry for theme('page'), we can tell
 * theme() to use a different template file name when we need to render a child
 * window.
 *
 * @see overlay_child_js()
 * @see overlay_theme_registry_alter()
 * @see template_preprocess_page()
 * @see template_preprocess()
 * @see theme()
 *
 * @ingroup themeable
 */
function overlay_preprocess_page(&$variables) {
  if (!empty($GLOBALS['overlay_page_template'])) {
    if (!isset($variables['template_files'])) {
      $variables['template_files'] = array();
    }
    array_unshift($variables['template_files'], 'overlay-page');
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * The main goal of this function is to set $form_state['redirect'] to FALSE
 * when a submitted form performs a request to close the overlay where
 * it's been processed.
 *
 * A few notes on the workflow we're using here:
 *
 * - Form API is requested to build a form. Then invokes all hook_form_alter()
 *   implementations.
 * - Here we install an after_build callback because still, there may be other
 *   modules that can add submit handlers from their own hook_form_alter().
 * - Ok, form API processes all hook_form_alter() implementations, then invokes
 *   our after_build callback where we can scan the whole form structure in
 *   search for elements that have submit handlers. We want to append our own
 *   submit handler so that we can catch requests to close the active child
 *   dialog performed by other modules using the API overlay_close_dialog()
 *   from their submit handlers.
 * - Our submit handler has been installed using an after_build callback because
 *   this is kind of low level technique, which is not often used by contributed
 *   modules, and chances are that our submit handler is executed after all
 *   potential places from where overlay_close_dialog() can be used by a
 *   external module using the "Overlay API". Also, this way our module does
 *   not depend on the order module hooks are being invoked by Drupal.
 *
 * @see overlay_close_dialog()
 * @see drupal_process_form()
 * @see drupal_redirect_form()
 * @see drupal_get_form()
 *
 * @ingroup forms
 */
function overlay_form_alter(&$form, $form_state, $form_id) {
  // Here we simply want to install a form after_build callback.
  if (!isset($form['#after_build'])) {
    $form['#after_build'] = array();
  }
  $form['#after_build'][] = 'overlay_form_after_build';
  /*if (user_access('admin toolbar') && !empty($_GET['render']) && ($_GET['render'] == 'overlay')) {
    $form['#submit'][] = 'overlay_form_submit';
  }*/
}

/**
 * Form after build callback.
 *
 * Ok, all hook_form_alter() have been processed. Now, if someone has enabled
 * the global variable $GLOBALS['overlay_page_template'], then we want to
 * scan the form structure in search of elements with submit handlers.
 *
 * @see _form_builder_handle_input_element()
 * @see _form_builder_ie_cleanup()
 * @see form_execute_handlers()
 * @see form_builder()
 *
 * @ingroup forms
 */
function overlay_form_after_build($form, &$form_state) {
  if (!empty($GLOBALS['overlay_page_template'])) {
    // Form API may have already captured submit handlers from the submitted
    // button before after_build callback is invoked. This may have been done
    // by _form_builder_handle_input_element().
    // If so, the list of submit handlers is stored in the $form_state array
    // which is something we can also alter from here, luckly. :)
    // Rememeber: our goal here is set $form_state['redirect'] is set to FALSE
    // if the API overlay_close_dialog() has been invoked. That's because we
    // want to tell the parent window to close the overlay.
    if (!empty($form_state['submit_handlers']) && !in_array('overlay_form_submit', $form_state['submit_handlers'])) {
      $form_state['submit_handlers'][] = 'overlay_form_submit';
    }

    // Find form elements with submit handlers recursively.
    overlay_form_after_build_recursive($form, $form_state);
  }
  return $form;
}

/**
 * Find form elements with submit handlers recursively.
 *
 * @ingroup forms
 */
function overlay_form_after_build_recursive(&$elements, &$form_state) {
  // Recurse through all children elements.
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      overlay_form_after_build_recursive($elements[$key], $form_state);
    }
  }
  // If this element has submit handlers, then append our own.
  if (isset($elements['#submit'])) {
    $elements['#submit'][] = 'overlay_form_submit';
  }
}

/**
 * Generic form submit handler.
 *
 * When we are requested to close an overlay, we don't want Form API to
 * perform any redirection once the submitted form has been processed.
 *
 * When $form_state['redirect'] is set to FALSE, then Form API will simply
 * re-render the form with the values still in its fields. And this is all
 * we need to output the javascript that will tell the parent window to close
 * the child dialog.
 *
 * @ingroup forms
 */
function overlay_form_submit($form, &$form_state) {
  if (!empty($GLOBALS['overlay_close_dialog'])) {
    $form_state['redirect'] = FALSE;
  }
}

/**
 * API: Add javascript and stylesheets to the parent page.
 *
 * @ingroup overlay_api
 */
function overlay_parent_js() {
  global $base_path;
  static $processed;

  // Make sure external resources are not included more than once.
  if (isset($processed)) {
    return;
  }
  $processed = TRUE;

  // Add required jQuery UI elements. Note that we don't use
  // drupal_add_library() here, since we have no use for the CSS files added
  // by the library.
  drupal_add_js('misc/ui/ui.core.js', array('weight' => JS_LIBRARY + 5));
  drupal_add_js('misc/ui/ui.dialog.js', array('weight' => JS_LIBRARY + 6));

  $module_path = drupal_get_path('module', 'overlay');
  drupal_add_css($module_path . '/overlay-parent.css');
  drupal_add_js($module_path . '/overlay-parent.js');
  drupal_add_js(array('overlay' => array('shadowPath' => $base_path . drupal_get_path('module', 'overlay') . '/images/ovrly-shdw-bt-lt.png')), array('type' => 'setting'));
}

/**
 * API: Add javascript and stylesheets to the child page.
 *
 * @ingroup overlay_api
 */
function overlay_child_js() {
  static $processed;
  // Make sure external resources are not included more than once.
  if (isset($processed)) {
    return;
  }
  $processed = TRUE;

  // Disable admin toolbar, which is something child windows don't need.
  module_invoke('toolbar', 'suppress', TRUE);

  // This is required to get access to jQuery UI extensions to jQuery itself,
  // such as the ':focusable' and ':tabbable' selectors. No need for the whole
  // library, so not using drupal_add_library().
  drupal_add_js('misc/ui/ui.core.js', array('weight' => JS_LIBRARY + 5));

  // Add javascript and stylesheets to the child page.
  $module_path = drupal_get_path('module', 'overlay');
  drupal_add_css($module_path .'/overlay-child.css');
  drupal_add_js($module_path .'/overlay-child.js');

  // Tell Drupal's theme system to use the overlay template.
  $GLOBALS['overlay_page_template'] = TRUE;
}

/**
 * API: Close a client side dialog.
 *
 * This function should be used on form submit handlers to trigger the
 * action that will close the overlay on the client side.
 *
 * @param $args
 *   An optional array of arguments that will be forwarded to the client
 *   side onSubmit callback.
 *
 * @ingroup overlay_api
 */
function overlay_close_dialog($args = NULL) {
  // Make sure this action is not processed more than once.
  if (isset($GLOBALS['overlay_close_dialog'])) {
    return;
  }

  // Build the javascript settings that will close the overlay on the
  // client side.
  $child_js_settings = array(
    'closeOverlay' => 1,
    'statusMessages' => theme('status_messages'),
    'args' => (isset($args) && is_array($args) ? $args : array()),
  );
  drupal_add_js(array('overlayChild' => $child_js_settings), 'setting');

  // Tell Drupal's Form API that we are requested to close the overlay,
  // so we do not wish to perform redirections after submitted form has been
  // processed.
  $GLOBALS['overlay_close_dialog'] = TRUE;
}
