<?php
// $Id$

/**
 * @file
 * Displays the Drupal administration interface in an overlay.
 */

/**
 * Displaying an overlay parent window.
 */
define('OVERLAY_PARENT', 0);

/**
 * Displaying an overlay child window.
 */
define('OVERLAY_CHILD', 1);

/**
 * Implementation of hook_init().
 */
function overlay_init() {
  global $custom_theme;
  // Only act if the admin toolbar "is enabled" (user has access).
  if (user_access('access toolbar')) {
    if (isset($_GET['render']) && $_GET['render'] == 'overlay') {
      $admin_theme = variable_get('admin_theme', 0);
      if ($custom_theme != $admin_theme) {
        // If system module did not switch the theme yet (i.e. this is not an
        // admin page, per se), we should switch the theme here.
        $custom_theme = $admin_theme;
        drupal_add_css(drupal_get_path('module', 'system') . '/admin.css');
      }
      overlay_mode(OVERLAY_CHILD);
    }
    else {
      // Otherwise add overlay parent code and our behavior.
      overlay_mode(OVERLAY_PARENT);
    }
  }
}

/**
 * Implementation of hook_elements().
 */
function overlay_elements() {
  $elements = array();
  $elements['form']['#after_build_recursive'][] = 'overlay_form_after_build';
  return $elements;
}

/**
 * Preprocess template variables for page.tpl.php.
 */
function overlay_preprocess_page(&$variables) {
  if (overlay_mode() == OVERLAY_CHILD) {
    // When rendering a page for the overlay, skip all regions generated by
    // blocks, except the content and help regions.
    foreach ($variables['page'] as $key => $value) {
      if (strpos($key, '#') !== 0 && !in_array($key, array('content', 'help'))) {
        unset($variables['page'][$key]);
      }
    }
    // Add overlay class, so themes can react to being displayed in the overlay.
    $variables['classes_array'][] = 'overlay';
    // Do not include site name or slogan in the overlay title.
    $variables['head_title'] = drupal_get_title();
  }
}

/**
 * Form after build callback.
 *
 * Ok, all hook_form_alter() have been processed. Now, if someone has enabled
 * the global variable $GLOBALS['overlay_page_template'], then we want to
 * scan the form structure in search of elements with submit handlers.
 *
 * @see _form_builder_handle_input_element()
 * @see _form_builder_ie_cleanup()
 * @see form_execute_handlers()
 * @see form_builder()
 *
 * @ingroup forms
 */
function overlay_form_after_build($form, &$form_state) {
  if (isset($_GET['render']) && $_GET['render'] == 'overlay') {
    // Form API may have already captured submit handlers from the submitted
    // button before after_build callback is invoked. This may have been done
    // by _form_builder_handle_input_element().
    // If so, the list of submit handlers is stored in the $form_state array
    // which is something we can also alter from here, luckily.
    // Rememeber: our goal here is set $form_state['redirect'] is set to FALSE
    // if the API overlay_close_dialog() has been invoked. That's because we
    // want to tell the parent window to close the overlay.
    if (!empty($form_state['submit_handlers']) && !in_array('overlay_form_submit', $form_state['submit_handlers'])) {
      $form_state['submit_handlers'][] = 'overlay_form_submit';
    }
    // If this element has submit handlers, then append our own.
    if (isset($form['#submit'])) {
      $form['#submit'][] = 'overlay_form_submit';
    }
  }
  return $form;
}

/**
 * Generic form submit handler.
 *
 * When we are requested to close an overlay, we don't want Form API to
 * perform any redirection once the submitted form has been processed.
 *
 * When $form_state['redirect'] is set to FALSE, then Form API will simply
 * re-render the form with the values still in its fields. And this is all
 * we need to output the javascript that will tell the parent window to close
 * the child dialog.
 *
 * @ingroup forms
 */
function overlay_form_submit($form, &$form_state) {
  if (is_array($form_state['redirect'])) {
    if (!empty($form_state['redirect'][1])) {
      if (is_array($form_state['redirect'][1])) {
        // Query is an array, add our marker as a key.
        $form_state['redirect'][1]['render'] = 'overlay';
      }
      else {
        // Query is not an array, add our marker as string.
        $form_state['redirect'][1] .= '&render=overlay';
      }
    }
    else {
      // Empty or is not set, but parent is array. Add array.
      $form_state['redirect'][1] = array('render' => 'overlay');
    }
  }
  elseif (!isset($form_state['redirect']) || ($form_state['redirect'] !== FALSE && $form_state['redirect'] !== NULL)) {
    // Not an array. Save the path value and add our own marker.
    $form_state['redirect'] = array(!empty($form_state['redirect']) ? $form_state['redirect'] : $_GET['q'], array('render' => 'overlay'));
  }
}

/**
 * Set overlay mode and add proper Javascript and styles to the page.
 *
 * @ingroup overlay_api
 */
function overlay_mode($mode = NULL) {
  global $base_path;
  $overlay_mode = &drupal_static(__FUNCTION__);

  // Make sure external resources are not included more than once. Also return
  // current mode, if no mode was specified.
  if (isset($overlay_mode) || !isset($mode)) {
    return $overlay_mode;
  }
  $overlay_mode = $mode;
  $module_path = drupal_get_path('module', 'overlay');

  switch($mode) {
    case OVERLAY_PARENT:
      // Add required jQuery UI elements. Note that we don't use
      // drupal_add_library() here, since we have no use for the CSS files added
      // by the library.
      drupal_add_js('misc/ui/ui.core.js', array('weight' => JS_LIBRARY + 5));
      drupal_add_js('misc/ui/ui.dialog.js', array('weight' => JS_LIBRARY + 6));

      drupal_add_css($module_path . '/overlay-parent.css');
      drupal_add_js($module_path . '/overlay-parent.js');

      $settings = array(
        'overlay' => array(
          'shadowPath' => $base_path . drupal_get_path('module', 'overlay') . '/images/ovrly-shdw-bt-lt.png',
        ),
      );
      drupal_add_js($settings, array('type' => 'setting'));
      break;

   case OVERLAY_CHILD:
      // Disable admin toolbar, which is something child windows don't need.
      module_invoke('toolbar', 'suppress', TRUE);

      // This is required to get access to jQuery UI extensions to jQuery itself,
      // such as the ':focusable' and ':tabbable' selectors. No need for the whole
      // library, so not using drupal_add_library().
      drupal_add_js('misc/ui/ui.core.js', array('weight' => JS_LIBRARY + 5));

      // Add javascript to the child page.
      drupal_add_js($module_path . '/overlay-child.js');
      break;
  }
  return $overlay_mode;
}
